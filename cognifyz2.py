# -*- coding: utf-8 -*-
"""Cognifyz2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18WfOoRNuzKU3vKLFoc9kJtoldvmt0fFk

###LEVEL 3

#TASK 1
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

#load the dataset
df=pd.read_csv(r"/content/drive/MyDrive/Dataset_01.csv")
df.head()

"""#Restaurent reviews"""

df.rename(columns={"Rating text":"Reviews"},inplace=True)

"""Q1.Analyze the text reviews to identify the most common positive and negative keywords"""

df.Reviews.unique()

from collections import Counter
import pandas as pd
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/drive')
df=pd.read_csv(r"/content/drive/MyDrive/Dataset_01.csv")
#step.1:Remove the empty results
df.rename(columns={"Rating text":"Reviews"},inplace=True)
df_filtered = df[df['Reviews'] != "Not rated"]

#step.2:Filter reviews based on "Aggregate rating"
bad_reviews=df_filtered[df_filtered['Aggregate rating']<=2.5]['Reviews']
good_reviews=df_filtered[df_filtered['Aggregate rating']>=2.6]['Reviews']

#step.3:Count the frequency of reviews
bad_counts=Counter(bad_reviews)
good_counts=Counter(good_reviews)

#step.4:Convert to dataframes for plotting
bad_df=pd.DataFrame(bad_counts.items(),columns=['Reviews','Count']).sort_values(by='Count',ascending=False).head(10)
good_df=pd.DataFrame(good_counts.items(),columns=['Reviews','Count']).sort_values(by='Count',ascending=False).head(10)

#step.5:Plot Bar charts
def plot_bar_chart(df,title,color):
  plt.figure(figsize=(8,5))
  plt.barh(df['Reviews'],df['Count'],color=color)
  plt.xlabel('Count',fontsize=12)
  plt.ylabel('Reviews',fontsize=12)
  plt.title(title,fontsize=14,fontweight='bold')
  plt.gca().invert_yaxis() #Highest count is on top
  plt.show()

#Generate bar charts
plot_bar_chart(good_df,"Most common good reviews",color="#4ECDC4") #Teal color
plot_bar_chart(bad_df,"Most common bad reviews",color="#FF6B6B") #Red color

"""#Q2.Calculate the average length of reviews and explore if there is a relationship between review length and rating"""

import seaborn as sns
#Step.1:Remove the missing reviews
df_filtered=df[df['Reviews'].notna()].copy()

#Step.2:Calculate the review length(character count)
df_filtered['Review_length']=df_filtered['Reviews'].apply(lambda x:len(x.strip()))

#Step.3:Calculate the average review length
average_length=round(df_filtered['Review_length'].mean(),2)
print(f"Average review length is:{average_length.round()} characters.")

print("\n")

#Step.4:Scatter plot-Review length vs Rating
plt.figure(figsize=(8,5))
sns.scatterplot(x=df_filtered['Aggregate rating'],y=df_filtered['Review_length'],alpha=0.5,color='dodgerblue')
plt.xlabel('Aggregate Rating',fontsize=12)
plt.ylabel('Review length(Characters)',fontsize=12)
plt.title('Review length vs Aggregate Rating',fontsize=14,fontweight='bold')
plt.show()

"""Task 2:Vote Analysis

#Q1.Identify the restaurants with highest and lowest number of votes:
"""

# Aggregate votes by restraurant
restaurant_votes=df.groupby('Restaurant Name',as_index=False)['Votes'].sum()

#Find the restaurant with highest votes
highest_votes_restaurant=restaurant_votes.loc[restaurant_votes['Votes'].idxmax()]
#Aggregate votes by restraurant
restaurant_votes=df.groupby('Restaurant Name', as_index=False)['Votes'].sum()

#Find the restaurant with highest votes
highest_votes_restaurant=restaurant_votes.loc[restaurant_votes['Votes'].idxmax()]
least_voted_restaurant=restaurant_votes.loc[restaurant_votes['Votes'].idxmin()]

#Print the results
#Aggregate votes by restraurant
restaurant_votes=df.groupby('Restaurant Name', as_index=False)['Votes'].sum()

#Find the restaurant with highest votes
highest_votes_restaurant=restaurant_votes.loc[restaurant_votes['Votes'].idxmax()]
least_voted_restaurant=restaurant_votes.loc[restaurant_votes['Votes'].idxmin()]

#Print the results
print(f" The restaurant with highest number of votes is {highest_votes_restaurant['Restaurant Name']} with {highest_votes_restaurant['Votes']} votes.")
print("\n")
print(f" The restaurant with lowest number of votes is {least_voted_restaurant['Restaurant Name']} with {least_voted_restaurant['Votes']} votes.")

"""#Q2.Analyse if there is there is correlation between the number of votes and rating of the restaurant:"""

plt.figure(figsize=(13,7))

#Scatter plots(Votes on x axis,Rating on y axis)
sns.scatterplot(x=df['Votes'],y=df['Aggregate rating'],alpha=0.5,color='red')
#Thin thread line(with swapped axes)
sns.regplot(x=df['Votes'],y=df['Aggregate rating'],scatter=False,color='green',line_kws={'linewidth':1})
#Adjust axis limits
plt.xlim(df['Votes'].min(),df['Votes'].max())
plt.ylim(0,5)
plt.xlabel('Number of votes',fontsize=12)
plt.ylabel('Aggregate Rating',fontsize=12)
plt.title('Correlations between votes and ratings',fontsize=14,fontweight='bold')
plt.show()

#Calculate correlation
correlation=df['Votes'].corr(df['Aggregate rating'])
print(f"The correlation between votes and Aggregate ratings is: {correlation:.4f}.")

"""#Task 3: Price Range vs Online delivery and Table booking"""

df.columns

df['Has Online delivery'].unique()

df['Has Table booking'].unique()

import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/drive')
df=pd.read_csv(r"/content/drive/MyDrive/Dataset_01.csv")
#Set Whitegrid style
sns.set_style('whitegrid')

#Ensure proper data formatting
df['Has Online delivery']=df['Has Online delivery'].astype(str).str.strip().str.lower().map({'yes':1,'no': 0})
df['Has Table booking']=df['Has Table booking'].astype(str).str.strip().str.lower().map({'yes':1,'no': 0})

#Group by price range
price_group=df.groupby("Price range").agg({'Has Online delivery':'mean','Has Table booking':'mean'}).reset_index()

#Convert the mean to percentage
price_group['Has Online delivery'] *= 100
price_group['Has Table booking']*= 100

#Display results
print(price_group)

#Display unique colors
colors=sns.color_palette("husl",2)

#Create subplots
fig, axes=plt.subplots(1,2,figsize=(14,6))

#Online delivery plot
sns.barplot(x='Price range',y='Has Online delivery',data=price_group,ax=axes[0],color=colors[0])
axes[0].set_title('Percentage of restaurants with Online Delivery by price range',fontsize=14,fontweight='bold')
axes[0].set_xlabel('Price range')
axes[0].set_ylabel('Percentage(%)')
axes[0].set_ylim(0,100)

#Table booking plot
sns.barplot(x='Price range',y='Has Table booking',data=price_group,ax=axes[1],color=colors[1])
axes[1].set_title('Percentage of restaurants with Table Booking by price range',fontsize=14,fontweight='bold')
axes[1].set_xlabel('Price range')
axes[1].set_ylabel('Percentage(%)')
axes[1].set_ylim(0,100)

#Adjust spacing between subplots
plt.tight_layout()

#Show the plot
plt.show()

#Filter only restaurants that have online delivery
online_delivery_df=df[df['Has Online delivery']==1]

#Count the number of restaurants in price range
price_group_counts=online_delivery_df['Price range'].value_counts()

#Convert counts to percentage
price_group_percentage=(price_group_counts/price_group_counts.sum())*100

#Create a pie chart
plt.figure(figsize=(4,4))
plt.pie(price_group_percentage,labels=price_group_percentage.index,autopct='%1.1f%%',startangle=90,colors=['red','skyblue','violet','greej'],shadow=True)

#Add title
plt.title('Percentage of restaurants with Online Delivery by price range')

#Display the chart
plt.show()